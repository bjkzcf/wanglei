// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import UIKit

struct R {
  static func validate() {
    
  }
  
  struct file {
    
  }
  
  struct font {
    
  }
  
  struct image {
    static var brandAssets: UIImage? { return UIImage(named: "Brand Assets", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var cellArrow: UIImage? { return UIImage(named: "CellArrow", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var erweima: UIImage? { return UIImage(named: "erweima", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var handShake: UIImage? { return UIImage(named: "handShake", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var iDInfo: UIImage? { return UIImage(named: "IDInfo", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var keyManager: UIImage? { return UIImage(named: "keyManager", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var kongxin: UIImage? { return UIImage(named: "kongxin", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var launchImage: UIImage? { return UIImage(named: "LaunchImage", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var lishijilu: UIImage? { return UIImage(named: "lishijilu", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var moreAbout: UIImage? { return UIImage(named: "MoreAbout", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var moreHelp: UIImage? { return UIImage(named: "MoreHelp", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var moreMessage: UIImage? { return UIImage(named: "MoreMessage", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var moreNetease: UIImage? { return UIImage(named: "MoreNetease", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var morePush: UIImage? { return UIImage(named: "MorePush", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var moreShare: UIImage? { return UIImage(named: "MoreShare", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var moreUpdate: UIImage? { return UIImage(named: "MoreUpdate", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var navigationButtonReturn: UIImage? { return UIImage(named: "navigationButtonReturn", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var navigationButtonReturnClick: UIImage? { return UIImage(named: "navigationButtonReturnClick", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var set: UIImage? { return UIImage(named: "set", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var shebeiliebiao: UIImage? { return UIImage(named: "shebeiliebiao", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var sound_Effect: UIImage? { return UIImage(named: "sound_Effect", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var zhuangtai: UIImage? { return UIImage(named: "zhuangtai", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var zhuangtaiHeightLight: UIImage? { return UIImage(named: "zhuangtaiHeightLight", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var zhuangtaichangan: UIImage? { return UIImage(named: "zhuangtaichangan", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
  }
  
  struct nib {
    static var sLCPassWordViewController: _R.nib._SLCPassWordViewController { return _R.nib._SLCPassWordViewController() }
  }
  
  struct reuseIdentifier {
    
  }
  
  struct segue {
    
  }
  
  struct storyboard {
    
  }
}

struct _R {
  static var hostingBundle: NSBundle? { return NSBundle(identifier: "com.huatune.SLCDOOR") }
  
  struct nib {
    struct _SLCPassWordViewController: NibResource {
      var instance: UINib { return UINib.init(nibName: "SLCPassWordViewController", bundle: _R.hostingBundle) }
      var name: String { return "SLCPassWordViewController" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
  }
}

struct ReuseIdentifier<T>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

struct StoryboardSegueIdentifier<Segue: UIStoryboardSegue, Source: UIViewController, Destination: UIViewController>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

struct TypedStoryboardSegueInfo<Segue: UIStoryboardSegue, Source: UIViewController, Destination: UIViewController>: CustomStringConvertible {
  let destinationViewController: Destination
  let identifier: String?
  let segue: Segue
  let sourceViewController: Source
  
  var description: String { return identifier ?? "" }
  
   init?(segue: UIStoryboardSegue) {
    guard let segue = segue as? Segue, sourceViewController = segue.sourceViewController as? Source, destinationViewController = segue.destinationViewController as? Destination else { return nil }
    self.segue = segue
    self.identifier = segue.identifier
    self.sourceViewController = sourceViewController
    self.destinationViewController = destinationViewController
  }
}

protocol NibResource {
  var instance: UINib { get }
  var name: String { get }
}

protocol Reusable {
  associatedtype T
  
  var reuseIdentifier: ReuseIdentifier<T> { get }
}

extension UITableView {
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath?) -> T? {
    if let indexPath = indexPath {
      return dequeueReusableCellWithIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
    }
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableHeaderFooterViewWithIdentifier<T : UITableViewHeaderFooterView>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableHeaderFooterViewWithIdentifier(identifier.identifier) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibForHeaderFooterView<T: NibResource where T: Reusable, T.T: UIView>(nibResource: T) {
    registerNib(nibResource.instance, forHeaderFooterViewReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
}

extension UICollectionView {
  func dequeueReusableCellWithReuseIdentifier<T: UICollectionViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableCellWithReuseIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func dequeueReusableSupplementaryViewOfKind<T: UICollectionReusableView>(elementKind: String, withReuseIdentifier identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableSupplementaryViewOfKind(elementKind, withReuseIdentifier: identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellWithReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResource: T, forSupplementaryViewOfKind kind: String) {
    registerNib(nibResource.instance, forSupplementaryViewOfKind: kind, withReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResources: [T], forSupplementaryViewOfKind kind: String) {
    nibResources.forEach { self.registerNib($0, forSupplementaryViewOfKind: kind) }
  }
}

extension UIViewController {
  convenience init(nib: NibResource) {
    self.init(nibName: nib.name, bundle: _R.hostingBundle)
  }
}

extension UIViewController {
  func performSegueWithIdentifier<Segue: UIStoryboardSegue,Source: UIViewController,Destination: UIViewController>(identifier: StoryboardSegueIdentifier<Segue, Source, Destination>, sender: AnyObject?) {
    performSegueWithIdentifier(identifier.identifier, sender: sender)
  }
}

extension UIStoryboardSegue {
  func typedInfoWithIdentifier<Segue: UIStoryboardSegue,Source: UIViewController,Destination: UIViewController>(identifier: StoryboardSegueIdentifier<Segue, Source, Destination>) -> TypedStoryboardSegueInfo<Segue, Source, Destination>? {
    guard self.identifier == identifier.identifier else { return nil }
    return TypedStoryboardSegueInfo(segue: self)
  }
}